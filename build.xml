<project name="FacebookLinkBench" default="dist" basedir="."
         xmlns:artifact="antlib:org.apache.maven.artifact.ant">
  <property name="linkbench.version" value="0.1"/>

    <description>
        simple example build file
    </description>

  <!-- set global properties for this build -->
  <property file="${basedir}/build.properties" />
  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="build.lib" location="build/lib"/>
  <property name="build.tools" location="build/tools"/>
  <property name="dist"  location="dist"/>
  <property name="lib"  location="lib"/>
  <property name="test.output"  location="test-output"/>
  <property name="test.rawoutput"  location="${test.output}/raw"/>
  <property name="test.tmp"  location="${test.output}/tmp"/>
  <property name="test.report"  location="${test.output}/report"/>
  <property name="linkbench.jar"
            value="${dist}/FacebookLinkBench-${linkbench.version}.jar"/>
  <property name="linkbench.latest.jar" value="${dist}/FacebookLinkBench.jar"/>

  <!-- By default, debugging symbols are not created. This
       can be overridden with command line property -->
  <property name="debug" value="false"/>

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <mkdir dir="${build.lib}"/>
    <mkdir dir="${build.tools}"/>
  </target>

  <target name="compile" depends="init,mvn.init"
        description="compile the source " >
    <!-- Compile the java code from ${src} into ${build} -->
    <javac includeantruntime="false" srcdir="${src}" destdir="${build}"
           source="1.7" target="1.7"
           debug="${debug}">
      <classpath>
        <pathelement path="${classpath}"/>
        <fileset dir="${lib}">
          <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${build.lib}">
          <include name="**/*.jar"/>
        </fileset>
        <pathelement location="classes"/>
        <dirset dir="${build}">
          <include name="apps/**/classes"/>
          <exclude name="apps/**/*Test*"/>
        </dirset>
      </classpath>
    </javac>
  </target>

  <target name="dist" depends="compile"
        description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}"/>

    <!-- Put everything in ${build} into the jar file -->
    <jar jarfile="${linkbench.jar}" basedir="${build}"/>

    <!-- Symlink latest >
    <delete file="${linkbench.latest.jar}" />
    <symlink link="${linkbench.latest.jar}" resource="${linkbench.jar}" / -->
  </target>

  <target name="test" description="Execute unit tests"
        depends="dist">
    <mkdir dir="${test.rawoutput}"/>
    <junit printsummary="true" failureproperty="junit.failure" fork="on">
      <classpath>
        <pathelement location="${linkbench.jar}"/>
        <fileset dir="${lib}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>

      <assertions> <enable /> </assertions>
      <batchtest todir="${test.rawoutput}">
        <fileset dir="${build}">
          <include name="**/*Test*.class"/>
          <exclude name="**/LinkStoreHBaseGeneralAtomicityTesting.class"/>
          <exclude name="**/*TestBase.class"/>
          <exclude name="**/MySqlTestConfig.class"/>
          <exclude name="**/DistributionTestBase.class"/>
          <exclude name="**/*$*.class"/> <!-- ignore nested classes -->
        </fileset>
        <formatter type="xml"/>
      </batchtest>
    </junit>
    <mkdir dir="${test.tmp}"/>
    <mkdir dir="${test.report}"/>
    <junitreport todir="${test.tmp}">
      <fileset dir="${test.rawoutput}"/>
      <report todir="${test.report}"/>
    </junitreport>
    <fail if="junit.failure" message="Unit test(s) failed.  See reports!"/>
  </target>

  <target name="clean"
        description="clean up" >
    <!-- Delete generated directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
    <delete dir="${test.output}"/>
  </target>

  <target name="proxy" if="proxy.enabled">
    <setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}"
      proxyuser="${proxy.user}" proxypassword="${proxy.pass}"/>
  </target>

  <target name="mvn.ant.tasks.download" depends="init,mvn.ant.tasks.check,proxy" unless="mvn.ant.tasks.found">
    <get src="${mvn.ant.task.url}/${mvn.ant.task.jar}" dest="${build.tools}/${mvn.ant.task.jar}" usetimestamp="true"/>
  </target>

  <target name="mvn.ant.tasks.check">
    <condition property="mvn.ant.tasks.found">
      <typefound uri="antlib:org.apache.maven.artifact.ant" name="artifact"/>
    </condition>
  </target>

  <target name="mvn.init" depends="mvn.ant.tasks.download" unless="mvn.finished">
    <!-- Download mvn ant tasks, download dependencies, and setup pom file -->
    <typedef uri="antlib:org.apache.maven.artifact.ant" classpath="${build.tools}/${mvn.ant.task.jar}"/>

    <!-- remote repositories used to download dependencies from -->
    <artifact:remoteRepository id="fbnexus" url="${mvn.fb.repo}"/>

    <!-- Download the dependencies -->
    <artifact:dependencies filesetId="build-dependency-jars">
      <pom file="pom.xml"/>
    </artifact:dependencies>

    <!-- Copy the dependencies to the build/lib dir -->
    <copy todir="${build}/lib">
      <fileset refid="build-dependency-jars"/>
      <mapper type="flatten"/>
    </copy>

    <property name="mvn.finished" value="true"/>
  </target>

</project>
